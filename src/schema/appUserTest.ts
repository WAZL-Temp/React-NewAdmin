import { booleanField, fileUploadField, genderField, gstField, numericField, requiredStringField, stringAlphanumeric, stringAlphanumericWithSpecialChars, stringDateFormat, stringEmail, stringMobileNumber, stringNumeric, stringOnlyAlphabets, stringPassword } from "./baseSchema";

type TransFn = (key: string, params?: Record<string, unknown>) => string;

export const appUserTestValidate = (t: TransFn) => ({
	createById:stringNumeric(t('appUserTests.columns.fields.createById'),t,0,0),
	id:stringNumeric(t('appUserTests.columns.fields.id'),t,0,0),
	name:stringOnlyAlphabets(t('appUserTests.columns.fields.name'),t,2,100),
	firstName:stringOnlyAlphabets(t('appUserTests.columns.fields.firstName'),t,2,100),
	lastName:stringOnlyAlphabets(t('appUserTests.columns.fields.lastName'),t,2,100),
	mobile:stringOnlyAlphabets(t('appUserTests.columns.fields.mobile'),t,2,100),
	mobileVerified:booleanField(t('appUserTests.columns.fields.mobileVerified'),t),
	emailId:stringOnlyAlphabets(t('appUserTests.columns.fields.emailId'),t,0,100),
	emailVerified:booleanField(t('appUserTests.columns.fields.emailVerified'),t),
	shopName:stringOnlyAlphabets(t('appUserTests.columns.fields.shopName'),t,2,200),
	password:stringOnlyAlphabets(t('appUserTests.columns.fields.password'),t,2,100),
	pincode:stringOnlyAlphabets(t('appUserTests.columns.fields.pincode'),t,0,6),
	state:stringOnlyAlphabets(t('appUserTests.columns.fields.state'),t,0,100),
	district:stringOnlyAlphabets(t('appUserTests.columns.fields.district'),t,0,100),
	address:stringOnlyAlphabets(t('appUserTests.columns.fields.address'),t,2,10000),
	addressLine:stringOnlyAlphabets(t('appUserTests.columns.fields.addressLine'),t,2,10000),
	verifyShop:stringOnlyAlphabets(t('appUserTests.columns.fields.verifyShop'),t,2,100),
	verifyShopLabel:stringOnlyAlphabets(t('appUserTests.columns.fields.verifyShopLabel'),t,2,100),
	gst:stringOnlyAlphabets(t('appUserTests.columns.fields.gst'),t,2,100),
	gstCertificate:stringOnlyAlphabets(t('appUserTests.columns.fields.gstCertificate'),t,0,0),
	photoShopFront:stringOnlyAlphabets(t('appUserTests.columns.fields.photoShopFront'),t,0,0),
	visitingCard:stringOnlyAlphabets(t('appUserTests.columns.fields.visitingCard'),t,0,0),
	cheque:stringOnlyAlphabets(t('appUserTests.columns.fields.cheque'),t,0,0),
	gstOtp:stringOnlyAlphabets(t('appUserTests.columns.fields.gstOtp'),t,0,100),
	isActive:booleanField(t('appUserTests.columns.fields.isActive'),t),
	isAdmin:booleanField(t('appUserTests.columns.fields.isAdmin'),t),
	hasImpersonateAccess:booleanField(t('appUserTests.columns.fields.hasImpersonateAccess'),t),
	photoAttachment:stringOnlyAlphabets(t('appUserTests.columns.fields.photoAttachment'),t,0,0),
	role:stringOnlyAlphabets(t('appUserTests.columns.fields.role'),t,2,100),
	roleLabel:stringOnlyAlphabets(t('appUserTests.columns.fields.roleLabel'),t,2,100),
	publish:stringOnlyAlphabets(t('appUserTests.columns.fields.publish'),t,2,100),
	publishLabel:stringOnlyAlphabets(t('appUserTests.columns.fields.publishLabel'),t,2,100),
	importDataId:stringNumeric(t('appUserTests.columns.fields.importDataId'),t,0,0),
	lastLogin:stringDateFormat(t('appUserTests.columns.fields.lastLogin'),t),
	defaultLanguage:stringOnlyAlphabets(t('appUserTests.columns.fields.defaultLanguage'),t,0,10),
	isPremiumUser:booleanField(t('appUserTests.columns.fields.isPremiumUser'),t),
	totalPlot:stringNumeric(t('appUserTests.columns.fields.totalPlot'),t,0,0),
	reportedTo:stringOnlyAlphabets(t('appUserTests.columns.fields.reportedTo'),t,0,100),
	reportedBy:stringOnlyAlphabets(t('appUserTests.columns.fields.reportedBy'),t,0,100),
	appUserName:stringOnlyAlphabets(t('appUserTests.columns.fields.appUserName'),t,0,0),
	gender:stringOnlyAlphabets(t('appUserTests.columns.fields.gender'),t,0,100),
	genderLabel:stringOnlyAlphabets(t('appUserTests.columns.fields.genderLabel'),t,0,100),
	createDate:stringDateFormat(t('appUserTests.columns.fields.createDate'),t),
	updateDate:stringDateFormat(t('appUserTests.columns.fields.updateDate'),t),
	deleteDate:stringDateFormat(t('appUserTests.columns.fields.deleteDate'),t),
	updateById:stringNumeric(t('appUserTests.columns.fields.updateById'),t,0,0),
	deleteById:stringNumeric(t('appUserTests.columns.fields.deleteById'),t,0,0),
	isDelete:booleanField(t('appUserTests.columns.fields.isDelete'),t),

// <!--validate-Data-->
});